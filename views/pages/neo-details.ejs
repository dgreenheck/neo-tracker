<!DOCTYPE html>
<html>
<head>
    <title><%= name %></title>
    <link rel="stylesheet" href="/css/styles.css" type="text/css">
    <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

    <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@0.143.0/build/three.module.js"
        }
      }
    </script>
    <script type="module" src="/js/orbit.js"></script>
    <script type="text/javascript" src="/js/closeApproachFilter.js"></script>
</head>
<body onload="filterTable()">
    <button onclick="history.back()">Back</button>

    <h1><%= name %></h1>

    <h2>Details</h2>
    <table>
      <tr>
        <td>Reference ID</td>
        <td><%= neo_reference_id %></td>
      </tr>
      <tr>
        <td>Designation</td>
        <td><%= designation %></td>
      </tr>
      <tr>
        <td>Absolute Magnitude</td>
        <td><%= absolute_magnitude_h %></td>
      </tr>
      <tr>
        <td>Is Potentially Hazardous</td>
        <td><%= is_potentially_hazardous_asteroid %></td>
      </tr>
      <tr>
        <td>Min Estimated Diameter (m)</td>
        <td><%= Math.round(estimated_diameter.meters.estimated_diameter_min).toLocaleString() %></td>
      </tr>
      <tr>
        <td>Max Estimated Diameter (m)</td>
        <td><%= Math.round(estimated_diameter.meters.estimated_diameter_max).toLocaleString() %></td>
      </tr>
    </table>

    <%- include('../partials/orbital-elements-table.ejs') %>

    <div id="orbit-viewer">
      <div id="overlay">Hello</div>
    </div>

    <h2>Close Approaches</h2>
    
    <label for="start-date">Start Date: </label>
    <input type="date" id="start-date" onfocusout="filterTable()" value="1900-01-01" min="1900-01-01" max="2200-01-01">
    <label for="end-date">End Date: </label>
    <input type="date" id="end-date" onfocusout="filterTable()" value="2200-01-01" min="1900-01-01" max="2200-01-01">
    
    <table id="table-closest-approaches">
      <tr>
        <th style="display: none;"></th>
        <th class="bg-primary text-white align-left">Date</th>
        <th class="bg-primary text-white align-right">Miss Distance (km)</th>
        <th class="bg-primary text-white align-right">Relative Velocity (km/s)</th>
      </tr>
      <% close_approach_data.forEach(approach => { %>
      <tr>
        <%# Hide this column, only used for filtering %>
        <td style="display: none;"><%= approach.close_approach_date %></td>
        <td class="align-left"><%= approach.close_approach_date_full %></td>
        <td class="align-right"><%= Math.trunc(Number(approach.miss_distance.kilometers)).toLocaleString() %></td>
        <td class="align-right"><%= Number(approach.relative_velocity.kilometers_per_second).toFixed(3).toLocaleString() %></td>
      </tr>
      <% }) %>
    </table>

    <script type="module">
      import * as THREE from 'three';
      import OrbitView from '/js/orbitView.js';
      import { date2jd } from '/js/datetime.js';
      import { planets } from "/js/planets.js";

      const container = document.getElementById("orbit-viewer");
      let orbitView = new OrbitView(600, 600, container);

      const JD = date2jd(Date.now());

      for (const [key, planet] of Object.entries(planets)) {
        orbitView.addBody(planet, JD);
        orbitView.addOrbit(planet, JD);
      }

      const neo = neoObject(JD);
      orbitView.addBody(neo, JD);
      orbitView.addOrbit(neo, JD);

      orbitView.animate();

      function neoObject(t_eph) {
        const t_epoch = Number('<%= orbital_data.epoch_osculation %>');
        const a = Number('<%= orbital_data.semi_major_axis %>');
        const e = Number('<%= orbital_data.eccentricity %>');
        const I = Number('<%= orbital_data.inclination %>');
        const LAN = Number('<%= orbital_data.ascending_node_longitude %>');
        const arg_p = Number('<%= orbital_data.perihelion_argument %>');
        let M = Number('<%= orbital_data.mean_anomaly %>');
        const n = Number('<%= orbital_data.mean_motion %>');

        // Adjust mean anomaly by the mean motion to get the mean anomaly at t_eph
        M += (t_eph - t_epoch) * n;
        
        if (M < -180) M += 360;
        if (M > 180) M -= 360;

        // Adjust mean anomaly by the mean motion
        const LP = LAN + arg_p;
        const L = LAN + arg_p + M;

        return {
          diameter: 100,
          color: 0xFFFFFF,
          epoch: t_epoch,
          orbit: [a,e,I,L,LP,LAN,0,0,0,0,0,0]
        }
      }
    </script>
</body>
</html>