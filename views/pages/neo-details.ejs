<!DOCTYPE html>
<html>
<head>
    <title><%= name %></title>
    <link rel="stylesheet" href="/css/styles.css" type="text/css">
    <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

    <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@0.143.0/build/three.module.js"
        }
      }
    </script>
    <script type="text/javascript" src="/js/orbit.js"></script>
</head>
<body onload="filterTable()">
    <button onclick="history.back()">Back</button>

    <h1><%= name %></h1>

    <h2>Details</h2>
    <table>
      <tr>
        <td>Reference ID</td>
        <td><%= neo_reference_id %></td>
      </tr>
      <tr>
        <td>Designation</td>
        <td><%= designation %></td>
      </tr>
      <tr>
        <td>Absolute Magnitude</td>
        <td><%= absolute_magnitude_h %></td>
      </tr>
      <tr>
        <td>Is Potentially Hazardous</td>
        <td><%= is_potentially_hazardous_asteroid %></td>
      </tr>
      <tr>
        <td>Min Estimated Diameter (m)</td>
        <td><%= Math.round(estimated_diameter.meters.estimated_diameter_min).toLocaleString() %></td>
      </tr>
      <tr>
        <td>Max Estimated Diameter (m)</td>
        <td><%= Math.round(estimated_diameter.meters.estimated_diameter_max).toLocaleString() %></td>
      </tr>
    </table>

    <h2>Orbital Elements</h2>
    <table>
      <tr>
        <td>Eccentricity</td>
        <td><%= orbital_data.eccentricity %></td>
      </tr>
      <tr>
        <td>Semi-major Axis (AU)</td>
        <td><%= orbital_data.semi_major_axis %></td>
      </tr>
      <tr>
        <td>Inclination (deg)</td>
        <td><%= orbital_data.inclination %></td>
      </tr>
      <tr>
        <td>Longitude of the Ascending Node (deg)</td>
        <td><%= orbital_data.ascending_node_longitude %></td>
      </tr>
      <tr>
        <td>Argument of Perihelion</td>
        <td><%= orbital_data.perihelion_argument %></td>
      </tr>
      <tr>
        <td>Mean Anomaly</td>
        <td><%= orbital_data.mean_anomaly %></td>
      </tr>
      <tr>
        <td>Orbital Period (days)</td>
        <td><%= orbital_data.orbital_period %></td>
      </tr>
    </table>

    <div id="orbit-viewer"></div>

    <h2>Close Approaches</h2>
    
    <label for="start-date">Start Date: </label>
    <input type="date" id="start-date" onfocusout="filterTable()" value="1900-01-01" min="1900-01-01" max="2200-01-01">
    <label for="end-date">End Date: </label>
    <input type="date" id="end-date" onfocusout="filterTable()" value="2200-01-01" min="1900-01-01" max="2200-01-01">
    
    <table id="table-closest-approaches">
      <tr>
        <th style="display: none;"></th>
        <th class="bg-primary text-white align-left">Date</th>
        <th class="bg-primary text-white align-right">Miss Distance (km)</th>
        <th class="bg-primary text-white align-right">Relative Velocity (km/s)</th>
      </tr>
      <% close_approach_data.forEach(approach => { %>
      <tr>
        <%# Hide this column, only used for filtering %>
        <td style="display: none;"><%= approach.close_approach_date %></td>
        <td class="align-left"><%= approach.close_approach_date_full %></td>
        <td class="align-right"><%= Math.trunc(Number(approach.miss_distance.kilometers)).toLocaleString() %></td>
        <td class="align-right"><%= Number(approach.relative_velocity.kilometers_per_second).toFixed(3).toLocaleString() %></td>
      </tr>
      <% }) %>
    </table>
    
    <script type="text/javascript">
      function filterTable() {
        let startDate = Date.parse(document.getElementById("start-date").value);
        let endDate = Date.parse(document.getElementById("end-date").value);
        let table = document.getElementById("table-closest-approaches");
        let tableRows = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tableRows.length; i++) {
          let dateColumn = tableRows[i].getElementsByTagName("td")[0];
          if (dateColumn) {
            let date = Date.parse(dateColumn.innerText);
            if (date >= startDate && date <= endDate) {
              tableRows[i].style.display = "";
            } else {
              tableRows[i].style.display = "none";
            }
          }
        }
      }

      function toggleStartDateFilter() {
        if (!document.getElementById('checkbox-start-date').checked) {
          document.getElementById('start-date').setAttribute('disabled', 'true');
        } else {
          document.getElementById('start-date').removeAttribute('disabled');
        }
      }

      function toggleEndDateFilter() {
        if (!document.getElementById('checkbox-end-date').checked) {
          document.getElementById('end-date').setAttribute('disabled', 'true');
        } else {
          document.getElementById('end-date').removeAttribute('disabled');
        }
      }
    </script>

    <script type="module">
      import * as THREE from 'three';

      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, 1.0, 0.1, 1000);
      camera.position.z = 40;

      // Setup renderer
      const renderer = new THREE.WebGLRenderer({ alpha: false });
      renderer.setClearColor(new THREE.Color( 0x000000 ), 1);
      renderer.setSize(600, 600);

      // Add canvas to the DOM
      let canvas = document.getElementById("orbit-viewer").appendChild(renderer.domElement);
      canvas.className = "view-three-d";

      const geometry = new THREE.SphereGeometry(1, 16, 16);

      const sunMesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: 0xffdd00 }));
      sunMesh.scale.set(0.25, 0.25, 0.25);
      scene.add(sunMesh);

      for (const [key, planet] of Object.entries(planets)) {
        console.log(key);
        const planetMesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: planet.color }));
        const scale = Math.log10(planet.diameter / 2) / 20.0;
        const pos = getPlanetPosition(planet, JD_J2000);
        console.log(scale);
        console.log(pos);
        planetMesh.scale.set(scale, scale, scale);
        planetMesh.position.set(pos.x, pos.y, pos.z);
        scene.add(planetMesh);
      }

      /*
      const neo = new THREE.Mesh(neoGeometry, neoMaterial);
      let pos = getNEOPosition();
      neo.position.set(pos.x, pos.y, pos.z);
      console.log(neo.position);
      scene.add(neo);
      */

      function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      };

      animate();

      function getNEOPosition() {
        let a = Number('<%= orbital_data.semi_major_axis %>');
        let e = Number('<%= orbital_data.eccentricity %>');
        let i = Number('<%= orbital_data.inclination %>');
        let Omega = Number('<%= orbital_data.ascending_node_longitude %>');
        let omega = Number('<%= orbital_data.perihelion_argument %>');
        let M = Number('<%= orbital_data.mean_anomaly %>');
        return kepler2cartesian(a, e, i, omega, Omega, M);
      }
    </script>
</body>
</html>